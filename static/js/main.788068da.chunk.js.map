{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","placeholder","disabled","length","newText","toLowerCase","showAlert","toUpperCase","navigator","clipboard","writeText","split","join","filter","element","defaultProps","Alert","height","alert","msg","App","setMode","setAlert","message","setTimeout","aboutText","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.788068da.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                            <a className=\"nav-link\"  href=\"/about\">{props.aboutText}</a>\r\n                        </li> */}\r\n                    </ul>\r\n                    <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\"  onClick = {props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable dark mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    aboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"Set title here\"\r\n}\r\n","import React, { useState } from 'react'\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        // console.log(\"Uppercase button was clicked \" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase!\" , \"success\");\r\n    }\r\n\r\n    const handleLoClick = () => {\r\n        let newText = text.toLowerCase();\r\n       setText(newText);\r\n       props.showAlert(\"Converted to lowercase!\" , \"success\");\r\n        \r\n    }\r\n    \r\n    const handleClearClick = () => {\r\n        let newText = '';\r\n       setText(newText);\r\n       props.showAlert(\"Cleared text!\", \"success\");\r\n        \r\n    }\r\n    const handleCopy = () => {\r\n        navigator.clipboard.writeText(text); \r\n        props.showAlert(\"Copied to Clipboard!\", \"success\");\r\n    }\r\n    \r\n    const handleOnChange = (event) => {\r\n        // console.log(\"On change\");\r\n        setText(event.target.value)\r\n\r\n    }\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed!\", \"success\");\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n    //uses array destructuring syntax\r\n    //enter text here is the default value\r\n\r\n    // text = \"new text\" - Wrong way to change the state\r\n    // setText(\"put your text\"); - Correct way to change the state\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\"   style = {{ color: props.mode === 'light'?'black':'white'}} >\r\n                <h1 className = 'mb-3'>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} \r\n                    style = {{ backgroundColor: props.mode === 'dark'?'#e0e0e0':'white'}} \r\n                    id=\"myBox\" rows=\"7\" placeholder = \"Enter text here\"></textarea>\r\n                </div>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-2\" onClick={handleLoClick}> Convert to LowerCase</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-2\" onClick={handleUpClick}> Convert to UpperCase</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-2\" onClick={handleClearClick}> Clear text</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-2\" onClick={handleCopy}> Copy text</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-2\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n            </div>\r\n\r\n            <div className=\"container my-2\"   style = {{ color: props.mode === 'light'?'black':'white'}} >\r\n                <h2>Your text summary</h2>\r\n                <p>{text.split( /\\s+/).filter((element) => {return element.length!==0}).length} words , {text.length} characters</p>\r\n                <h3>Preview</h3>\r\n                <p>{text.length>0?text: \"Nothing to preview !\"}</p>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n   \r\n\r\n  return (\r\n      <div style = {{height: '50px'}}>\r\n      {props.alert && <div className = {`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        {props.alert.type}: {props.alert.msg}\r\n        </div>}\r\n       \r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\n\nfunction App() {\n\n  const [mode, setMode] = useState('light'); //Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n\n    setTimeout(() => {\n      setAlert(null)\n\n    }, 1000);\n\n  }\n\n  const toggleMode = () => {\n    if(mode === 'light'){\n      setMode('dark')\n      document.body.style.backgroundColor = '#121212';\n      showAlert(\"Dark mode has been enabled\" , \"success\");\n      // #6c757d\n    }\n\n    else{\n      setMode('light')\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\" , \"success\");\n    }\n\n  }\n\n\n  return (\n  <>\n    {/* <Router> */}\n\n    <Navbar title = \"TextZen\" aboutText = \"About Us\" mode = {mode}  toggleMode = {toggleMode} />\n    <Alert alert = {alert} />\n    <div className=\"container my-3\">\n\n    {/* <Switch>\n          <Route exact path=\"/about\">\n            <About mode = {mode} />\n          </Route>\n          <Route exact path=\"/\"> */}\n          <TextForm heading = \"Enter the text to analyze\"  showAlert = {showAlert}  mode = {mode}    />\n          {/* </Route>\n        </Switch> */}\n    </div>\n\n    {/* </Router> */}\n\n  </>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}